global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'digital-human-mvp'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Rules files
rule_files:
  - '/etc/prometheus/rules/*.yml'

# Scrape configurations
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Digital Human Frontend metrics
  - job_name: 'digital-human-frontend'
    static_configs:
      - targets: ['digital-human-frontend:8000']
    metrics_path: '/metrics'
    scrape_interval: 30s

  # Backend API metrics
  - job_name: 'backend-api'
    static_configs:
      - targets: ['backend:8081']
    metrics_path: '/api/metrics'
    scrape_interval: 30s

  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  # Redis Exporter
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

  # PostgreSQL Exporter
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Nginx Exporter
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']

  # Custom health check metrics
  - job_name: 'health-check'
    static_configs:
      - targets: ['localhost:8000']
    metrics_path: '/metrics'
    scrape_interval: 60s

# Alerts configuration
alerting_rules:
  - name: digital_human_alerts
    rules:
      - alert: HighErrorRate
        expr: rate(digital_human_health_check_errors[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"

      - alert: BackendDown
        expr: up{job="backend-api"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Backend API is down"
          description: "Backend API has been down for more than 1 minute"

      - alert: WebSocketDisconnected
        expr: digital_human_websocket_status == 0
        for: 3m
        labels:
          severity: warning
        annotations:
          summary: "WebSocket connection lost"
          description: "WebSocket has been disconnected for more than 3 minutes"

      - alert: HighResponseTime
        expr: digital_human_backend_latency_ms > 1000
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High backend response time"
          description: "Backend latency is {{ $value }}ms"

      - alert: LowFrameRate
        expr: digital_human_frame_rate < 30
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Low frame rate detected"
          description: "Frame rate is {{ $value }} FPS"

      - alert: HighMemoryUsage
        expr: digital_human_memory_usage_mb > 1024
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value }} MB"

      - alert: DiskSpaceLow
        expr: node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"} < 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Disk space is running low"
          description: "Less than 10% disk space remaining"

      - alert: ServiceUnhealthy
        expr: digital_human_health_status == 0
        for: 3m
        labels:
          severity: critical
        annotations:
          summary: "Digital Human service is unhealthy"
          description: "Health check status is unhealthy for more than 3 minutes"

# Remote write configuration (optional)
# remote_write:
#   - url: "https://prometheus-remote-write.example.com/api/v1/write"
#     basic_auth:
#       username: 'prometheus'
#       password: 'secret'
#     write_relabel_configs:
#       - source_labels: [__name__]
#         regex: 'digital_human.*'
#         action: keep